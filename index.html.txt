import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { Home, BookOpen, Heart, Target } from "lucide-react";

const initialStories = [
  {
    id: 1,
    title: "Gaslighting nivel experto",
    content:
      "Me decía que lo que yo recordaba nunca pasó. Que estaba loca. Que imaginaba cosas. Un día grabé una conversación... y ahí entendí todo.",
    tags: ["gaslighting"]
  },
  {
    id: 2,
    title: "La trampa emocional",
    content:
      "Siempre que discutíamos, terminaba llorando diciendo que si lo dejaba se haría daño. Estuve atrapada por culpa, no por amor.",
    tags: ["culpa", "chantaje"]
  },
  {
    id: 3,
    title: "Control disfrazado de amor",
    content:
      "Me decía que era por mi bien, que se preocupaba. Pero cada día decidía por mí: con quién hablaba, qué me ponía, cuándo salía.",
    tags: ["control"]
  }
];

export default function WalllieHome() {
  // Persistencia con localStorage
  const getStored = (key, fallback) => {
    if (typeof window === 'undefined') return fallback;
    try {
      return localStorage.getItem(key) || fallback;
    } catch {
      return fallback;
    }
  }
  const [view, setView] = useState("home");
  const [stories, setStories] = useState(() => {
    try {
      const stored = localStorage.getItem("walllieStories");
      return stored ? JSON.parse(stored) : initialStories.map(s => ({ ...s, likes: 0, favorite: false }));
    } catch {
      return initialStories.map(s => ({ ...s, likes: 0, favorite: false }));
    }
  });
  const [newTitle, setNewTitle] = useState("");
  const [newContent, setNewContent] = useState("");
  const [newTags, setNewTags] = useState("");
  const [filterTag, setFilterTag] = useState("");
  const [sortOrder, setSortOrder] = useState(getStored("sortOrder", "recent"));
  const [viewMode, setViewMode] = useState(getStored("viewMode", "card"));

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!newTitle || !newContent) return;
    const tagArray = newTags.split(",").map(tag => tag.trim()).filter(Boolean);
    const newStory = {
      id: stories.length + 1,
      title: newTitle,
      content: newContent,
      tags: tagArray
    };
    const updatedStories = [{ ...newStory, likes: 0, favorite: false }, ...stories];
    setStories(updatedStories);
    localStorage.setItem("walllieStories", JSON.stringify(updatedStories));
    setNewTitle("");
    setNewContent("");
    setNewTags("");
  };

  const allTags = Array.from(new Set(stories.flatMap(s => s.tags || [])));
  const filteredStories = filterTag ? stories.filter(s => s.tags?.includes(filterTag)) : stories;
  const sortedStories = [...filteredStories].sort((a, b) => {
    if (sortOrder === "recent") return b.id - a.id;
    if (sortOrder === "tags") return (b.tags?.length || 0) - (a.tags?.length || 0);
    if (sortOrder === "likes") return (b.likes || 0) - (a.likes || 0);
    return 0;
  });

  const renderContent = () => {
    switch (view) {
      case "guide":
        return (
          <div className="bg-white rounded-xl shadow p-4">
            <h2 className="text-xl font-semibold mb-4">Guía de banderas rojas</h2>
            <ul className="list-disc pl-5 space-y-2 text-sm text-gray-800">
              <li><strong>"Estás loca/o, eso nunca pasó."</strong> — Gaslighting emocional.</li>
              <li><strong>"Si me amaras, harías esto por mí."</strong> — Chantaje emocional.</li>
              <li><strong>"No soporto que hables con esa persona."</strong> — Control y aislamiento.</li>
              <li><strong>"Te pasas exagerando todo."</strong> — Minimización de emociones.</li>
            </ul>
            <p className="text-sm text-gray-600 mt-4">Aprender a identificarlas puede ayudarte a prevenir vínculos destructivos.</p>
          </div>
        );
      case "game":
        return (
          <div className="bg-white rounded-xl shadow p-4">
            <h2 className="text-lg font-semibold mb-2">Encuentra la bandera roja</h2>
            <p className="text-sm text-gray-700 mb-2">Haz clic en las palabras que consideres manipuladoras:</p>
            <p className="text-sm text-gray-900 bg-gray-100 p-3 rounded">
              Me decía que lo que yo recordaba nunca pasó. Que estaba loca. Que imaginaba cosas. Un día grabé una conversación... y ahí entendí todo.
            </p>
            <p className="text-xs text-gray-500 mt-2">(Este módulo se puede hacer interactivo más adelante)</p>
          </div>
        );
      case "favorites":
        return (
          <div className="bg-white rounded-xl shadow p-4">
            <h2 className="text-lg font-semibold mb-2">Tus historias guardadas</h2>
            {stories.filter(s => s.favorite).length === 0 ? (
  <p className="text-sm text-gray-600">Aún no has guardado ninguna historia.</p>
) : (
  <div className="space-y-4 mt-4">
    {stories.filter(s => s.favorite).map((story) => (
      <Card key={story.id} className="bg-white shadow">
        <CardContent className="p-4">
          <h3 className="text-lg font-semibold mb-2">{story.title}</h3>
          <p className="text-sm text-gray-700 whitespace-pre-line">{story.content}</p>
        </CardContent>
      </Card>
    ))}
  </div>
)}
          </div>
        );
      case "stories":
        return (
          <div className="space-y-6">
            <div className="bg-white shadow rounded-xl p-4">
              <h2 className="text-lg font-semibold mb-2">Comparte tu historia</h2>
              <form className="space-y-2" onSubmit={handleSubmit}>
                <input
                  type="text"
                  placeholder="Título"
                  className="w-full border border-gray-300 rounded px-3 py-2 text-sm"
                  value={newTitle}
                  onChange={(e) => setNewTitle(e.target.value)}
                />
                <textarea
                  placeholder="Escribe tu historia..."
                  rows={4}
                  className="w-full border border-gray-300 rounded px-3 py-2 text-sm"
                  value={newContent}
                  onChange={(e) => setNewContent(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="Etiquetas separadas por coma (ej: culpa, manipulación)"
                  className="w-full border border-gray-300 rounded px-3 py-2 text-sm"
                  value={newTags}
                  onChange={(e) => setNewTags(e.target.value)}
                />
                <button type="submit" className="w-full bg-rose-500 text-white py-2 px-4 rounded hover:bg-rose-600">
                  Enviar
                </button>
              </form>
            </div>

            {allTags.length > 0 && (
              <div className="flex flex-wrap gap-2 p-2">
                <div className="w-full flex flex-col sm:flex-row justify-center items-center gap-2 mb-2">
  <select
    value={sortOrder}
    onChange={(e) => {
    setSortOrder(e.target.value);
    localStorage.setItem("sortOrder", e.target.value);
  }}
    className="text-sm border border-gray-300 rounded px-3 py-1 text-gray-700"
  >
    <option value="recent">Más recientes</option>
    <option value="tags">Más etiquetas</option>
    <option value="likes">Más votadas</option>
  </select>
  <select
    value={viewMode}
    onChange={(e) => {
    setViewMode(e.target.value);
    localStorage.setItem("viewMode", e.target.value);
  }}
    className="text-sm border border-gray-300 rounded px-3 py-1 text-gray-700"
  >
    <option value="card">Vista de tarjetas</option>
    <option value="list">Vista de lista</option>
  </select>
</div>
                <button
                  onClick={() => setFilterTag("")}
                  className={`text-xs px-3 py-1 rounded-full border ${filterTag === "" ? "bg-red-500 text-white" : "bg-white text-red-500 border-red-300"}`}
                >
                  Todas
                </button>
                {allTags.map(tag => {
                  const count = stories.filter(s => s.tags?.includes(tag)).length;
                  return (
                    <button
                      key={tag}
                      onClick={() => setFilterTag(tag)}
                      className={`text-xs px-3 py-1 rounded-full border ${filterTag === tag ? "bg-red-500 text-white" : "bg-white text-red-500 border-red-300"}`}
                    >
                      #{tag} <span className="ml-1 text-[10px] text-gray-400">({count})</span>
                    </button>
                  );
                })}
              </div>
            )}

            <div className={viewMode === "card" ? "space-y-4" : "space-y-1"}>
              {sortedStories.map((story) => (
                <Card key={story.id} className={`bg-white shadow ${viewMode === "list" ? 'p-2' : ''}`}>
                  <CardContent className={viewMode === "list" ? "p-2" : "p-4"}>
                    <h3 className="text-lg font-semibold mb-2">{story.title}</h3>
                    <p className="text-sm text-gray-700 whitespace-pre-line mb-2">{story.content}</p>
                    {story.tags?.length > 0 && (
                      <div className="flex gap-2 flex-wrap mt-2">
                        {story.tags.map((tag, index) => (
                          <button
                            key={index}
                            onClick={() => setFilterTag(tag)}
                            className="text-xs bg-rose-100 text-rose-700 px-2 py-1 rounded-full hover:bg-rose-200"
                          >
                            #{tag}
                          </button>
                        ))}
                      </div>
                    )}
                  <div className="mt-3 flex justify-end">
  <button
    onClick={() => {
      const liked = stories.map(st => st.id === story.id ? { ...st, likes: st.likes + 1 } : st);
    setStories(liked);
    localStorage.setItem("walllieStories", JSON.stringify(liked));
    }}
    className="text-xs text-gray-500 hover:text-red-600 flex items-center gap-1"
  >
    ❤️ {story.likes}
  </button>
<button
  onClick={() => {
    const updated = stories.map(st => st.id === story.id ? { ...st, favorite: !st.favorite } : st);
    setStories(updated);
    localStorage.setItem("walllieStories", JSON.stringify(updated));
  }}
  className={`text-xs ${story.favorite ? 'text-red-500' : 'text-gray-400'} hover:text-red-600 flex items-center gap-1`}
>
  💖 {story.favorite ? 'Guardado' : 'Guardar'}
</button>
</div>
</CardContent>
                </Card>
              ))}
            </div>
          </div>
        );
      default:
        return (
          <div className="w-full max-w-md grid grid-cols-1 gap-4">
            <Card onClick={() => setView("stories")} className="cursor-pointer hover:shadow-xl">
              <CardContent className="p-6">
                <h2 className="text-xl font-semibold text-rose-700 mb-1">📚 Historias reales</h2>
                <p className="text-sm text-gray-600">Lee testimonios sobre relaciones tóxicas y red flags emocionales.</p>
              </CardContent>
            </Card>

            <Card onClick={() => setView("game")} className="cursor-pointer hover:shadow-xl">
              <CardContent className="p-6">
                <h2 className="text-xl font-semibold text-yellow-600 mb-1">🎯 Detecta la red flag</h2>
                <p className="text-sm text-gray-600">Juega a encontrar frases peligrosas escondidas en historias.</p>
              </CardContent>
            </Card>

            <Card onClick={() => setView("guide")} className="cursor-pointer hover:shadow-xl">
              <CardContent className="p-6">
                <h2 className="text-xl font-semibold text-blue-600 mb-1">📘 Guía emocional</h2>
                <p className="text-sm text-gray-600">Aprende a identificar patrones de manipulación y chantaje emocional.</p>
              </CardContent>
            </Card>

            <Card onClick={() => setView("favorites")} className="cursor-pointer hover:shadow-xl">
              <CardContent className="p-6">
                <h2 className="text-xl font-semibold text-red-500 mb-1">💖 Ver historias guardadas</h2>
                <p className="text-sm text-gray-600">Accede a tus testimonios favoritos o más impactantes.</p>
              </CardContent>
            </Card>
          </div>
        );
    }
  };

  return (
    <div className="w-full min-h-screen flex flex-col items-center justify-between bg-gradient-to-br from-rose-100 to-red-200 p-4 pb-20">
      <div className="w-full max-w-md flex-grow">{renderContent()}</div>

      <div className="fixed bottom-0 w-full max-w-md flex justify-around items-center bg-white border-t border-gray-200 py-3 shadow-md">
        <Button variant="ghost" onClick={() => setView("home")} className={view === "home" ? "text-red-600" : "text-gray-500"}><Home size={20} /></Button>
        <Button variant="ghost" onClick={() => setView("stories")} className={view === "stories" ? "text-red-600" : "text-gray-500"}><BookOpen size={20} /></Button>
        <Button variant="ghost" onClick={() => setView("game")} className={view === "game" ? "text-red-600" : "text-gray-500"}><Target size={20} /></Button>
        <Button variant="ghost" onClick={() => setView("favorites")} className={view === "favorites" ? "text-red-600" : "text-gray-500"}><Heart size={20} /></Button>
      </div>
    </div>
  );
}
